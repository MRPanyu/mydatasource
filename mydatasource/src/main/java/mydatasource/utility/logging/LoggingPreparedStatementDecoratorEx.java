package mydatasource.utility.logging;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import mydatasource.PreparedStatementDecoratorEx;

public class LoggingPreparedStatementDecoratorEx extends
		PreparedStatementDecoratorEx {

	protected Log logger = LogFactory.getLog(this.getClass());

	protected List<String> batchedSqls = new ArrayList<String>();

	@Override
	public ResultSet executeQuery() throws SQLException {
		long begin = System.currentTimeMillis();
		ResultSet rs = super.executeQuery();
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils.log(logger, myDataSource, sql, indexedParameters,
				maxParameterIndex, executeTime);
		return rs;
	}

	@Override
	public int executeUpdate() throws SQLException {
		long begin = System.currentTimeMillis();
		int returnValue = super.executeUpdate();
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils.log(logger, myDataSource, sql, indexedParameters,
				maxParameterIndex, executeTime);
		return returnValue;
	}

	@Override
	public boolean execute() throws SQLException {
		long begin = System.currentTimeMillis();
		boolean returnValue = super.execute();
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils.log(logger, myDataSource, sql, indexedParameters,
				maxParameterIndex, executeTime);
		return returnValue;
	}

	@Override
	public void addBatch() throws SQLException {
		super.addBatch();
		batchedSqls.add(sql);
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		super.addBatch(sql);
		batchedSqls.add(sql);
		batchedIndexedParameters.add(new HashMap<Integer, Object>());
		batchedMaxParameterIndex.add(0);
	}

	@Override
	public int[] executeBatch() throws SQLException {
		long begin = System.currentTimeMillis();
		int[] returnValue = super.executeBatch();
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils
				.logBatch(logger, myDataSource, batchedSqls,
						batchedIndexedParameters, batchedMaxParameterIndex,
						executeTime);
		return returnValue;
	}

	// ------ copied from LoggingStatementDecorator ------
	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		long begin = System.currentTimeMillis();
		ResultSet rs = super.executeQuery(sql);
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils.log(logger, myDataSource, sql, executeTime);
		return rs;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		long begin = System.currentTimeMillis();
		int returnValue = super.executeUpdate(sql);
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils.log(logger, myDataSource, sql, executeTime);
		return returnValue;
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		long begin = System.currentTimeMillis();
		boolean returnValue = super.execute(sql);
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils.log(logger, myDataSource, sql, executeTime);
		return returnValue;
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		long begin = System.currentTimeMillis();
		int returnValue = super.executeUpdate(sql, autoGeneratedKeys);
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils.log(logger, myDataSource, sql, executeTime);
		return returnValue;
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		long begin = System.currentTimeMillis();
		int returnValue = super.executeUpdate(sql, columnIndexes);
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils.log(logger, myDataSource, sql, executeTime);
		return returnValue;
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		long begin = System.currentTimeMillis();
		int returnValue = super.executeUpdate(sql, columnNames);
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils.log(logger, myDataSource, sql, executeTime);
		return returnValue;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		long begin = System.currentTimeMillis();
		boolean returnValue = super.execute(sql, autoGeneratedKeys);
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils.log(logger, myDataSource, sql, executeTime);
		return returnValue;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		long begin = System.currentTimeMillis();
		boolean returnValue = super.execute(sql, columnIndexes);
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils.log(logger, myDataSource, sql, executeTime);
		return returnValue;
	}

	@Override
	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		long begin = System.currentTimeMillis();
		boolean returnValue = super.execute(sql, columnNames);
		long executeTime = System.currentTimeMillis() - begin;
		LoggingUtils.log(logger, myDataSource, sql, executeTime);
		return returnValue;
	}
}
