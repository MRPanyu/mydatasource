package mydatasource;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Basic connection decorator (always used as the last decorator by
 * {@link MyDataSource}) which provides decoration functions for all types of
 * <code>Statement</code>s
 * 
 * @author Panyu
 *
 */
class MyConnectionDecorator extends ConnectionDecorator {

	protected Log logger = LogFactory.getLog(this.getClass());

	@Override
	public Statement createStatement() throws SQLException {
		return decorateStatement(super.createStatement());
	}

	@Override
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return decoratePreparedStatement(super.prepareStatement(sql));
	}

	@Override
	public CallableStatement prepareCall(String sql) throws SQLException {
		return decorateCallableStatement(super.prepareCall(sql));
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency)
			throws SQLException {
		return decorateStatement(super.createStatement(resultSetType,
				resultSetConcurrency));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		return decoratePreparedStatement(super.prepareStatement(sql,
				resultSetType, resultSetConcurrency));
	}

	@Override
	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		return decorateCallableStatement(super.prepareCall(sql, resultSetType,
				resultSetConcurrency));
	}

	@Override
	public Statement createStatement(int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return decorateStatement(super.createStatement(resultSetType,
				resultSetConcurrency, resultSetHoldability));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return decoratePreparedStatement(super.prepareStatement(sql,
				resultSetType, resultSetConcurrency, resultSetHoldability));
	}

	@Override
	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return decorateCallableStatement(super.prepareCall(sql, resultSetType,
				resultSetConcurrency, resultSetHoldability));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
			throws SQLException {
		return decoratePreparedStatement(super.prepareStatement(sql,
				autoGeneratedKeys));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
			throws SQLException {
		return decoratePreparedStatement(super.prepareStatement(sql,
				columnIndexes));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames)
			throws SQLException {
		return decoratePreparedStatement(super.prepareStatement(sql,
				columnNames));
	}

	private Statement decorateStatement(Statement statement) {
		Statement curSt = statement;
		for (Class<?> decClass : myDataSource.getStatementDecorators()) {
			try {
				StatementDecorator dec = (StatementDecorator) decClass
						.newInstance();
				dec.setMyDataSource(myDataSource);
				dec.setConnection(this);
				dec.setDelegateStatement(curSt);
				curSt = dec;
			} catch (Exception e) {
				logger.error("Error creating decorator: " + decClass.getName(),
						e);
				throw new RuntimeException(e);
			}
		}
		return curSt;
	}

	private PreparedStatement decoratePreparedStatement(
			PreparedStatement preparedStatement) {
		PreparedStatement curSt = preparedStatement;
		for (Class<?> decClass : myDataSource.getStatementDecorators()) {
			try {
				PreparedStatementDecorator dec = (PreparedStatementDecorator) decClass
						.newInstance();
				dec.setMyDataSource(myDataSource);
				dec.setConnection(this);
				dec.setDelegatePreparedStatement(curSt);
				curSt = dec;
			} catch (Exception e) {
				logger.error("Error creating decorator: " + decClass.getName(),
						e);
				throw new RuntimeException(e);
			}
		}
		return curSt;
	}

	private CallableStatement decorateCallableStatement(
			CallableStatement callableStatement) {
		CallableStatement curSt = callableStatement;
		for (Class<?> decClass : myDataSource.getStatementDecorators()) {
			try {
				CallableStatementDecorator dec = (CallableStatementDecorator) decClass
						.newInstance();
				dec.setMyDataSource(myDataSource);
				dec.setConnection(this);
				dec.setDelegateCallableStatement(curSt);
				curSt = dec;
			} catch (Exception e) {
				logger.error("Error creating decorator: " + decClass.getName(),
						e);
				throw new RuntimeException(e);
			}
		}
		return curSt;
	}

}
